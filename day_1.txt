✅ What We’ve Done So Far (In Simple Words)

---

1️⃣ Created the Project Structure (Backend part)

You created a folder structure like this:

```
Personal Tracker/
│
└── server/
    ├── models/         ← To store data structures (like User info)
    ├── routes/         ← To handle different API routes (like register, login)
    ├── .env            ← To keep sensitive info like DB URI safe
    ├── server.js       ← Main backend file (starts server, connects to MongoDB)
```


2️⃣ Installed Some Important Tools (Packages)

You installed backend tools (called dependencies) using this command:

```bash
npm install express mongoose cors dotenv bcryptjs jsonwebtoken
```

Here’s why we need them:

| 📦 Package       | 🤔 What It Does (in simple words)                                          |
| ---------------- | -------------------------------------------------------------------------- |
| express      | Helps us create API routes easily (like `/register`)                       |
| mongoose     | Lets us talk to MongoDB using JavaScript                                   |
| cors         | Helps backend and frontend talk even if on different ports (3000 and 5000) |
| dotenv       | Keeps secret data (like DB link) in a `.env` file, not directly in code    |
| bcryptjs     | Used to hide (hash) passwords before saving them in the database           |
| jsonwebtoken | Helps us give tokens when users login (used for authentication)            |

---

 3️⃣ Connected to MongoDB

In your `server.js`, you wrote code like this:

```js
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('✅ MongoDB connected'))
.catch(err => console.log('❌ DB error:', err));
```

🔗 This connects your backend to your MongoDB database using the secret URI from your `.env` file.

---

 4️⃣ Created a Simple Server

In `server.js`, you created a basic Express server with:

```js
app.get('/', (req, res) => {
  res.send('API is running...');
});
```

📡 This means when you open `http://localhost:5000`, you see:
“API is running...” → it proves your server is working.

---

 5️⃣ Created User Model (User.js)

Inside `models/User.js`, you created a User schema like:

```js
const UserSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
});
```

📦 This tells MongoDB what kind of data a "User" should have.

---

 6️⃣ Created Auth Routes (auth.js)

Inside `routes/auth.js`, you made two routes:

* `POST /register` → to sign up a user
* `POST /login` → to login a user and send a token

These routes:

* Take user input from frontend (name, email, password)
* Save the user in the database
* Hash the password before saving
* Generate a JWT token when user logs in

---

 7️⃣ Connected Auth Routes to Server

In `server.js`, you added this line:

```js
const authRoutes = require('./routes/auth');
app.use('/api/auth', authRoutes);
```

This means:

* If someone goes to `http://localhost:5000/api/auth/register` → it uses the register route.
* If someone goes to `http://localhost:5000/api/auth/login` → it uses the login route.

---

 ✅ Final Status Till Now

| ✅ Task                            | 💬 Status |
| --------------------------------- | --------- |
| Installed backend packages        | ✅ Done    |
| Created server.js file            | ✅ Done    |
| Connected to MongoDB              | ✅ Done    |
| Made User model                   | ✅ Done    |
| Created and connected auth routes | ✅ Done    |
| Server and DB running correctly   | ✅ Done    |

---
